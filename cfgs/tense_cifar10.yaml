session: {
  _comment_: exp1,
  save_path: ./logs,
  project_name : CIFAR10,
}

data : {
  data.class: data_loader.Classify.ClassificationDataset,
  data_csv_name: ./data/csv/train.csv,
  validation_ratio: 0,
  validation_csv_name : ./data/csv/valid.csv,
  test_csv_name: ./data/csv/test.csv,
  label_dict: ['plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck'],
  batch_size: 140,
}

model_teacher: {
  model.class: models.resnet_transfer.resnet.ResNet_transfer,
  model_name: resnet18,
  pretrained: true,
  num_classes: 10,
}

model_robust: {
  model.class: models.wideresnetcifar.WideResNet,
  num_classes: 10,
}

loss: {
  name: LBGATLoss,
  weight: [4,1],
  beta: 1,
}

# configure arguments of torch.optim.Optimizer
# You can add other arguments for the Optimizer
# Do not modify this key (eg. "name": SGD)
optimizer: {
  name: SGD,
  lr: 0.1,
  momentum: 0.9,
  weight_decay: 2e-4,
}

# configure arguments of torch.optim.lr_scheduler 
# feel free to add other arguments for the sheduler
# Do not modify this key (eg. "name": CosineAnnealingLR)
scheduler: {
  name: ReduceLROnPlateau,
  min_lr: 1e-4,
  mode: min,
  patience: 10,
  factor: 0.1,
}

adversarial: {
  perturb_steps: 10,
  step_size: 0.007,
  epsilon: 0.031,
  norm: np.inf,
  # norm: 2,
}

# Support sklearn metrics or custom metrics
train: {
  num_epochs: 100,
  metrics: ["accuracy_score", "f1_score"],
}
